plugins {
    id 'com.android.application'
    id 'kotlin-android'
    // O plugin Gradle do Flutter deve ser aplicado após os plugins Android e Kotlin.
    id 'com.google.gms.google-services' // Adicione esta linha
    id 'com.google.firebase.crashlytics' // Adicione esta linha se estiver usando o Crashlytics
    id 'dev.flutter.flutter-gradle-plugin' // A nova maneira recomendada de aplicar o plugin Flutter
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace = "com.example.app_agendai"
    compileSdk = 34 
    ndkVersion = '21.3.6528147'
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = "com.example.app_agendai"
        minSdk = 21 // Defina a versão mínima do SDK que você está usando
        targetSdk = 33 // Defina a versão alvo do SDK que você está usando
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    buildTypes {
        release {
            signingConfig = signingConfigs.debug // Substitua isso pela configuração de assinatura real para builds de release
        }
    }
}

flutter {
    source = '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
